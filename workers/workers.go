package workers

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"
	"strings"
)

type ProfileJson struct {
	Data struct {
		User struct {
			FriendshipStatus         interface{}   `json:"friendship_status"`
			Fullname                 string        `json:"full_name"`
			Gating                   interface{}   `json:"gating"`
			IsCheckpointMemorialized bool          `json:"is_checkpoint_memorialized"`
			IsPrivate                bool          `json:"is_private"`
			HasStoryArchive          interface{}   `json:"has_story_archive"`
			Username                 string        `json:"username"`
			SupervisionInfo          interface{}   `json:"supervision_info"`
			IsRegulatedC18           bool          `json:"is_regulated_c18"`
			RegulatedNewsInLocations []interface{} `json:"regulated_news_in_locations"`
			TextPostAppBadgeLabel    interface{}   `json:"text_post_app_badge_label"`
			ShowTextPostAppBadge     interface{}   `json:"show_text_post_app_badge"`
			TextPostNewPostCount     interface{}   `json:"text_post_new_post_count"`
			Pk                       string        `json:"pk"`
			LiveBroadcastVisibility  interface{}   `json:"live_broadcast_visibility"`
			LiveBroadcastID          interface{}   `json:"live_broadcast_id"`
			ProfilePicURL            string        `json:"profile_pic_url"`
			HdProfilePicURLInfo      struct {
				URL string `json:"url"`
			} `json:"hd_profile_pic_url_info"`
			IsUnpublished                  bool          `json:"is_unpublished"`
			LatestReelMedia                interface{}   `json:"latest_reel_media"`
			HasProfilePic                  interface{}   `json:"has_profile_pic"`
			AccountType                    int           `json:"account_type"`
			FollowerCount                  int           `json:"follower_count"`
			IsVerified                     bool          `json:"is_verified"`
			MutualFollowersCount           interface{}   `json:"mutual_followers_count"`
			ProfileContextLinksWithUserIds interface{}   `json:"profile_context_links_with_user_ids"`
			AddressStreet                  interface{}   `json:"address_street"`
			CityName                       interface{}   `json:"city_name"`
			IsBusiness                     bool          `json:"is_business"`
			Zip                            interface{}   `json:"zip"`
			BiographyWithEntities          interface{}   `json:"biography_with_entities"`
			Category                       interface{}   `json:"category"`
			ShouldShowCategory             interface{}   `json:"should_show_category"`
			AccountBadges                  []interface{} `json:"account_badges"`
			AiAgentType                    interface{}   `json:"ai_agent_type"`
			BioLinks                       []interface{} `json:"bio_links"`
			FbProfileBioLinkWeb            interface{}   `json:"fb_profile_bio_link_web"`
			ExternalLynxURL                interface{}   `json:"external_lynx_url"`
			ExternalURL                    string        `json:"external_url"`
			Pronouns                       []interface{} `json:"pronouns"`
			Biography                      string        `json:"biography"`
			TransparencyLabel              interface{}   `json:"transparency_label"`
			TransparencyProduct            interface{}   `json:"transparency_product"`
			HasChaining                    interface{}   `json:"has_chaining"`
			RemoveMessageEntrypoint        interface{}   `json:"remove_message_entrypoint"`
			FbidV2                         string        `json:"fbid_v2"`
			InteropMessagingUserFbid       string        `json:"interop_messaging_user_fbid"`
			ShowAccountTransparencyDetails bool          `json:"show_account_transparency_details"`
			IsEmbedsDisabled               bool          `json:"is_embeds_disabled"`
			IsProfessionalAccount          interface{}   `json:"is_professional_account"`
			FollowingCount                 int           `json:"following_count"`
			MediaCount                     int           `json:"media_count"`
			TotalClipsCount                interface{}   `json:"total_clips_count"`
			LatestBestiesReelMedia         interface{}   `json:"latest_besties_reel_media"`
			ReelMediaSeenTimestamp         interface{}   `json:"reel_media_seen_timestamp"`
			ID                             string        `json:"id"`
		} `json:"user"`
		Viewer struct {
			User interface{} `json:"user"`
		} `json:"viewer"`
	} `json:"data"`
	Extensions struct {
		IsFinal bool `json:"is_final"`
	} `json:"extensions"`
	Status string `json:"status"`
}
type AutoGenerated struct {
	Data struct {
		XdtAPIV1FbsearchTopsearchConnection struct {
			Users []struct {
				User struct {
					Username      string `json:"username"`
					Fullname      string `json:"full_name"`
					ID            string `json:"id"`
					ProfilePicURL string `json:"profile_pic_url"`
				} `json:"user"`
			} `json:"users"`
		} `json:"xdt_api__v1__fbsearch__topsearch_connection"`
	} `json:"data"`
}
type UserProfile struct {
	Fullname string `json:"full_name"`
	Username string `json:"username"`
	URL      string `json:"url"`
}
type User struct {
	Fullname      string `json:"full_name"`
	Username      string `json:"username"`
	ID            string `json:"id"`
	ProfilePicURL string `json:"profile_pic_url"`
}

func Profile(id string, client *http.Client) (UserProfile, error) {
	// Search and Profile doesnt send same data :(

	// ADD DATA STRING HERE 
	var data = strings.NewReader(``)
	req, err := http.NewRequest("POST", "https://www.instagram.com/graphql/query", data)
	if err != nil {
		log.Fatal(err)
	}
	// ADD HEADERS HERE
	
	// Request
	resp, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()

	// Check the response status code
	if resp.StatusCode != http.StatusOK {
		return UserProfile{}, fmt.Errorf("error: received status code %d", resp.StatusCode)
	}
	// Read the response body
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	// JSON parse
	var result ProfileJson
	if err := json.Unmarshal(body, &result); err != nil {
		fmt.Println("Error unmarshalling JSON:", err)
	}
	// Extracting the values
	username := result.Data.User.Username
	fullName := result.Data.User.Fullname
	hdProfilePicURL := result.Data.User.HdProfilePicURLInfo.URL
	user := UserProfile{
		Fullname: fullName,
		Username: username,
		URL:      "/proxy?url=" + url.QueryEscape(hdProfilePicURL),
	}
	return user, nil
}

func Search(query string, client *http.Client) ([]User, error) {
	// Search and Profile doesnt send same data :(

	// DATA STRING HERE | NOT THE SAME
	data := strings.NewReader("")
	req, err := http.NewRequest("POST", "https://www.instagram.com/graphql/query", data)
	if err != nil {
		log.Fatal(err)
	}
	// ADD HEADERS HERE | HEADERS ARE SAME

	resp, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()

	// Check the response status code
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("error: received status code %d", resp.StatusCode)
	}

	// Read the response body
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	// JSON parse
	var autoGen AutoGenerated
	if err := json.Unmarshal(body, &autoGen); err != nil {
		fmt.Println("Error unmarshalling JSON:", err)
	}

	// Extract values
	var users []User
	for _, userEntry := range autoGen.Data.XdtAPIV1FbsearchTopsearchConnection.Users {
		user := User{
			Fullname:      userEntry.User.Fullname,
			Username:      userEntry.User.Username,
			ID:            userEntry.User.ID,
			ProfilePicURL: "/proxy?url=" + url.QueryEscape(userEntry.User.ProfilePicURL),
		}
		users = append(users, user)
	}

	return users, nil
}
